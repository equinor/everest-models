from functools import partial

from everest_models.jobs.fm_drill_date_planner.config_model import (
    DrillDatePlannerConfig,
)
from everest_models.jobs.shared.arguments import (
    SchemaAction,
    add_output_argument,
    add_wells_input_argument,
    bootstrap_parser,
    get_parser,
)
from everest_models.jobs.shared.validators import parse_file, valid_input_file

_CONFIG_ARGUMENT = "-c/--config"
SCHEMAS = {_CONFIG_ARGUMENT: DrillDatePlannerConfig}


@bootstrap_parser
def build_argument_parser(skip_type=False):
    SchemaAction.register_models(SCHEMAS)
    parser, required_group = get_parser(
        description="Calculate and write drill times from scaled controls.",
    )
    add_wells_input_argument(
        parser,
        help="Wells file generated by Everest (wells.json).",
        skip_type=skip_type,
        required=False,
    )
    add_output_argument(
        required_group,
        help="Output file: input for drill planner job.",
        skip_type=skip_type,
    )
    required_group.add_argument(
        "-opt",
        "--optimizer",
        required=True,
        type=valid_input_file if not skip_type else str,
        help="File containing information related to wells. The format is "
        "consistent with the wells.json file when running everest and can "
        "be used directly.",
    )
    parser.add_argument(
        *_CONFIG_ARGUMENT.split("/"),
        type=(
            partial(parse_file, schema=DrillDatePlannerConfig) if not skip_type else str
        ),
        required=False,
        help="Optional config file containing wells.",
        default=DrillDatePlannerConfig(),
    )
    return parser
